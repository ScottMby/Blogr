@page "/CreateBlog"
@using System.Net.Http.Headers
@using Blogr.Server.Models;
@using Blogr.Shared;
@using Newtonsoft.Json;
@using System.Text;
@inject HttpClient Http;

<PageTitle>CreateBlog</PageTitle>

<div>
    <h1>Create Blog Post</h1>
    <h4>Upload .docx file</h4>
    @*Input text and post it and the file to the server*@
    <InputText @bind-Value="BlogTitle"></InputText>
    <select @bind="BlogCategory">
        <option disabled selected value> -- select an option -- </option>
        <option value="Software Engineering">Software Engineering</option>
        <option value="Data Science"> Data Science</option>
        <option value="Web Development">Web Development</option>
        <option value="Machine Learning">Machine Learning</option>
        <option value="Cybersecurity">Cybersecurity</option>
        <option value="Software Architecture">Software Architecture</option>
        <option value="Databases">Databases</option>
    </select>
    <InputFile OnChange="@OnInputFileChange" />
    <button type="submit" disabled="@_submitDisabled" onclick="@UploadBlog">Create Post</button>
    @if (_fileNames.Count > 0)
    {
        <p>File: @_fileNames[0]</p>
    }
    @if(StatusMessage != null)
    {
        <p>@StatusMessage</p>
    }
   
</div>


@code {

    string? StatusMessage { get; set; }

    bool _submitDisabled = false;

    private string? BlogTitle { get; set; }
    private string? BlogCategory { get; set; }
    private readonly int _maxAllowedFiles = 1;
    private readonly long _maxFileSize = 1048576 * 1; //1Mb max file size
    private List<string> _fileNames = new();
    private List<UploadResult> _uploadResults = new();
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        using MultipartFormDataContent content = new MultipartFormDataContent();

        foreach (IBrowserFile file in e.GetMultipleFiles(_maxAllowedFiles))
        {
            StreamContent fileContent = new StreamContent(file.OpenReadStream(_maxFileSize)); 
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            _fileNames.Add(file.Name);

            content.Add(content: fileContent, name: "\"files\"", fileName: file.Name);
        }

        HttpResponseMessage response = await Http.PostAsync("api/File", content);
        List<UploadResult>? newUploadResults = await response.Content.ReadFromJsonAsync<List<UploadResult>>();

        if (newUploadResults is not null)
        {
            _uploadResults = _uploadResults.Concat(newUploadResults).ToList();
        }
        else
        {
            StatusMessage = "File not found.";
        }
    }

    private string? GetStoredFileName(string fileName)
    {
        var uploadResult = _uploadResults.SingleOrDefault(f => f.FileName == fileName);
        if (uploadResult is not null)
            return uploadResult.StoredFileName;

        StatusMessage = "File not found.";
        return "File not found.";
    }

    private async Task<string> UploadBlog()
    {
        if (string.IsNullOrWhiteSpace(BlogTitle))
        {
            StatusMessage = "Please add a title";
            return "Failed to upload";
        }
        else
        {
            if (BlogCategory != null)
            {
                Dictionary<string, string?> values = new Dictionary<string, string?>
                {
                    { "Title", BlogTitle },
                    { "Category", BlogCategory },
                    { "ContentPath", GetStoredFileName(_fileNames[0]) },
                };
                string stringPayload = JsonConvert.SerializeObject(values);
                StringContent content = new StringContent(stringPayload, Encoding.UTF8, "application/json");
                HttpResponseMessage response = await Http.PostAsync("api/BlogUpload", content);

                if (response.IsSuccessStatusCode)
                {
                    StatusMessage = "File Uploaded Successfully.";
                    _submitDisabled = true;
                    return "Uploaded";
                }
                else
                {
                    StatusMessage = "File not found.";
                    return "Failed to upload" + response.StatusCode;
                }
            }
            else
            {
                StatusMessage = "Please add a category";
                return "Failed to upload";
            }
        }
    }
}
