@page "/CreateBlog"
@using System.Net.Http.Headers
@using Blogr.Server.Models;
@inject HttpClient Http;

<PageTitle>CreateBlog</PageTitle>

<div>
    <h1>Create Blog Post</h1>
            <h4>Upload .docx file</h4>
            @*Input text and post it and the file to the server*@
            <InputText id="blogTitle"></InputText>
            <InputFile OnChange="@OnInputFileChange" />
            <button type="submit">Create Post</button>


    

    @if(fileNames.Count > 0)
    {
        <p>File: @fileNames</p>
    }
</div>


@code {
    private int maxAllowedFiles = 1;
    private long maxFileSize = 1024 * 20; //20Kb max file size
    private List<string> fileNames = new();
    private List<UploadResult> uploadResults = new();
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            fileNames.Add(file.Name);

            content.Add(content: fileContent, name: "\"files\"", fileName: file.Name);
        }

        var response = await Http.PostAsync("api/File", content);
        var newUploadResults = await response.Content.ReadFromJsonAsync<List<UploadResult>>();

        if(newUploadResults is not null)
        {
            uploadResults = uploadResults.Concat(newUploadResults).ToList();
        }
    }

    private string? GetStoredFileName(string fileName)
    {
        var uploadResult = uploadResults.SingleOrDefault(f => f.FileName == fileName);
        if (uploadResult is not null)
            return uploadResult.StoredFileName;

        return "File not found.";
    }
}
