@page "/ViewBlog"
@page "/ViewBlog/{blogId:int}"
@using Blogr.Shared;
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager NavMan;
@inject HttpClient Http;
@implements IAsyncDisposable
<h3>ViewBlog</h3>

@if (BlogValid)
{
    <h4>@blog.Title</h4>
    <p>@blog.CreatorFirstName</p>
    <p>@blog.CreatorLastName</p>
    <img id="User-Photo" src="@blog.CreatorImgPath" />
    <p>Created: @blog.CreationDate.ToShortDateString()</p>
    <p>Last Updated: @blog.UpdatedDate.ToShortDateString()</p>
    <p>Views: @blogViews</p>
    <object data="@blog.ContentPath" type="application/pdf" width="100%" height="500px">
        <p>Unable to display PDF file. <a href="@blog.ContentPath">Download</a> instead.</p>
    </object>
}

@code {
    [Parameter]
    public int blogId { get; set; }

    private bool BlogValid = false;

    BlogDisplay blog = new BlogDisplay();

    private HubConnection? hubConnection;
    private int? blogViews;

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavMan.ToAbsoluteUri("/analyticshub"))
        .Build();

        hubConnection.On<int, int>("GetBlogViews", (views, bId) =>
        {
            if(bId == blogId)
            {
                blogViews = views;
            }
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("BlogViewChange", 1, blogId);
        }


    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if(hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        //Get the blog
        var temp = await Http.GetFromJsonAsync<BlogDisplay>("api/GetBlogById/" + blogId);
        if (temp != null)
        {
            blog = temp;
            BlogValid = true;
        }
        //Connect to signalr hub and listen for views
        await Connect();
        //Send the view as the page is loaded and the user is viewing
        await Send();

    }

}
